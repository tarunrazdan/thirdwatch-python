# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Chargeback(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, session_id=None, order_id=None, transaction_id=None, chargeback_state=None, chargeback_reason=None, custom_info=None):
        """
        Chargeback - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'session_id': 'str',
            'order_id': 'str',
            'transaction_id': 'str',
            'chargeback_state': 'str',
            'chargeback_reason': 'str',
            'custom_info': 'CustomInfo'
        }

        self.attribute_map = {
            'user_id': '_userId',
            'session_id': '_sessionId',
            'order_id': '_orderId',
            'transaction_id': '_transactionId',
            'chargeback_state': '_chargebackState',
            'chargeback_reason': '_chargebackReason',
            'custom_info': '_customInfo'
        }

        self._user_id = user_id
        self._session_id = session_id
        self._order_id = order_id
        self._transaction_id = transaction_id
        self._chargeback_state = chargeback_state
        self._chargeback_reason = chargeback_reason
        self._custom_info = custom_info

    @property
    def user_id(self):
        """
        Gets the user_id of this Chargeback.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :return: The user_id of this Chargeback.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Chargeback.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :param user_id: The user_id of this Chargeback.
        :type: str
        """

        self._user_id = user_id

    @property
    def session_id(self):
        """
        Gets the session_id of this Chargeback.
        The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.

        :return: The session_id of this Chargeback.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """
        Sets the session_id of this Chargeback.
        The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.

        :param session_id: The session_id of this Chargeback.
        :type: str
        """

        self._session_id = session_id

    @property
    def order_id(self):
        """
        Gets the order_id of this Chargeback.
        The ID for the order that this chargeback is filed against. This field is not required if this chargeback was filed against a transaction with no _orderId.

        :return: The order_id of this Chargeback.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this Chargeback.
        The ID for the order that this chargeback is filed against. This field is not required if this chargeback was filed against a transaction with no _orderId.

        :param order_id: The order_id of this Chargeback.
        :type: str
        """

        self._order_id = order_id

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this Chargeback.
        The ID for the transaction that this chargeback is filed against.

        :return: The transaction_id of this Chargeback.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this Chargeback.
        The ID for the transaction that this chargeback is filed against.

        :param transaction_id: The transaction_id of this Chargeback.
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def chargeback_state(self):
        """
        Gets the chargeback_state of this Chargeback.
        The current state of the chargeback. e.g. _received, _accepted, _disputed, _won, _lost

        :return: The chargeback_state of this Chargeback.
        :rtype: str
        """
        return self._chargeback_state

    @chargeback_state.setter
    def chargeback_state(self, chargeback_state):
        """
        Sets the chargeback_state of this Chargeback.
        The current state of the chargeback. e.g. _received, _accepted, _disputed, _won, _lost

        :param chargeback_state: The chargeback_state of this Chargeback.
        :type: str
        """

        self._chargeback_state = chargeback_state

    @property
    def chargeback_reason(self):
        """
        Gets the chargeback_reason of this Chargeback.
        This field can be used to capture the reason given. e.g. _fraud, _duplicate, _product_not_received, _product_unacceptable, _other\"

        :return: The chargeback_reason of this Chargeback.
        :rtype: str
        """
        return self._chargeback_reason

    @chargeback_reason.setter
    def chargeback_reason(self, chargeback_reason):
        """
        Sets the chargeback_reason of this Chargeback.
        This field can be used to capture the reason given. e.g. _fraud, _duplicate, _product_not_received, _product_unacceptable, _other\"

        :param chargeback_reason: The chargeback_reason of this Chargeback.
        :type: str
        """

        self._chargeback_reason = chargeback_reason

    @property
    def custom_info(self):
        """
        Gets the custom_info of this Chargeback.

        :return: The custom_info of this Chargeback.
        :rtype: CustomInfo
        """
        return self._custom_info

    @custom_info.setter
    def custom_info(self, custom_info):
        """
        Sets the custom_info of this Chargeback.

        :param custom_info: The custom_info of this Chargeback.
        :type: CustomInfo
        """

        self._custom_info = custom_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Chargeback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
