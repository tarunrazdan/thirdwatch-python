# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Item(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, item_id=None, product_title=None, price=None, currency_code=None, upc=None, sku=None, isbn=None, brand=None, manufacturer=None, category=None, tags=None, color=None, quantity=None, is_on_sale=None, max_quantity=None, discount_price=None, product_weight=None, country=None, description_short=None, description=None, seller=None):
        """
        Item - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'item_id': 'str',
            'product_title': 'str',
            'price': 'str',
            'currency_code': 'str',
            'upc': 'str',
            'sku': 'str',
            'isbn': 'str',
            'brand': 'str',
            'manufacturer': 'str',
            'category': 'str',
            'tags': 'str',
            'color': 'str',
            'quantity': 'int',
            'is_on_sale': 'bool',
            'max_quantity': 'int',
            'discount_price': 'str',
            'product_weight': 'str',
            'country': 'str',
            'description_short': 'str',
            'description': 'str',
            'seller': 'Seller'
        }

        self.attribute_map = {
            'item_id': '_itemId',
            'product_title': '_productTitle',
            'price': '_price',
            'currency_code': '_currencyCode',
            'upc': '_upc',
            'sku': '_sku',
            'isbn': '_isbn',
            'brand': '_brand',
            'manufacturer': '_manufacturer',
            'category': '_category',
            'tags': '_tags',
            'color': '_color',
            'quantity': '_quantity',
            'is_on_sale': '_isOnSale',
            'max_quantity': '_maxQuantity',
            'discount_price': '_discountPrice',
            'product_weight': '_productWeight',
            'country': '_country',
            'description_short': '_descriptionShort',
            'description': '_description',
            'seller': '_seller'
        }

        self._item_id = item_id
        self._product_title = product_title
        self._price = price
        self._currency_code = currency_code
        self._upc = upc
        self._sku = sku
        self._isbn = isbn
        self._brand = brand
        self._manufacturer = manufacturer
        self._category = category
        self._tags = tags
        self._color = color
        self._quantity = quantity
        self._is_on_sale = is_on_sale
        self._max_quantity = max_quantity
        self._discount_price = discount_price
        self._product_weight = product_weight
        self._country = country
        self._description_short = description_short
        self._description = description
        self._seller = seller

    @property
    def item_id(self):
        """
        Gets the item_id of this Item.
        The item's unique identifier according to your systems. Use the same ID that you would use to look up items on your website's database.

        :return: The item_id of this Item.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this Item.
        The item's unique identifier according to your systems. Use the same ID that you would use to look up items on your website's database.

        :param item_id: The item_id of this Item.
        :type: str
        """

        self._item_id = item_id

    @property
    def product_title(self):
        """
        Gets the product_title of this Item.
        The item's name, e.g., \"WD 2 TB External Hard Drive\".

        :return: The product_title of this Item.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """
        Sets the product_title of this Item.
        The item's name, e.g., \"WD 2 TB External Hard Drive\".

        :param product_title: The product_title of this Item.
        :type: str
        """

        self._product_title = product_title

    @property
    def price(self):
        """
        Gets the price of this Item.
        The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"

        :return: The price of this Item.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Item.
        The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"

        :param price: The price of this Item.
        :type: str
        """

        self._price = price

    @property
    def currency_code(self):
        """
        Gets the currency_code of this Item.
        The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.

        :return: The currency_code of this Item.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this Item.
        The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.

        :param currency_code: The currency_code of this Item.
        :type: str
        """

        self._currency_code = currency_code

    @property
    def upc(self):
        """
        Gets the upc of this Item.
        If the item has a Universal Product Code (UPC), provide it here.

        :return: The upc of this Item.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """
        Sets the upc of this Item.
        If the item has a Universal Product Code (UPC), provide it here.

        :param upc: The upc of this Item.
        :type: str
        """

        self._upc = upc

    @property
    def sku(self):
        """
        Gets the sku of this Item.
        If the item has a Stock-keeping Unit ID (SKU), provide it here.

        :return: The sku of this Item.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this Item.
        If the item has a Stock-keeping Unit ID (SKU), provide it here.

        :param sku: The sku of this Item.
        :type: str
        """

        self._sku = sku

    @property
    def isbn(self):
        """
        Gets the isbn of this Item.
        If the item is a book with an International Standard Book Number (ISBN), provide it here.

        :return: The isbn of this Item.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """
        Sets the isbn of this Item.
        If the item is a book with an International Standard Book Number (ISBN), provide it here.

        :param isbn: The isbn of this Item.
        :type: str
        """

        self._isbn = isbn

    @property
    def brand(self):
        """
        Gets the brand of this Item.
        The brand name of the item.

        :return: The brand of this Item.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """
        Sets the brand of this Item.
        The brand name of the item.

        :param brand: The brand of this Item.
        :type: str
        """

        self._brand = brand

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this Item.
        Name of the item's manufacturer.

        :return: The manufacturer of this Item.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this Item.
        Name of the item's manufacturer.

        :param manufacturer: The manufacturer of this Item.
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def category(self):
        """
        Gets the category of this Item.
        The category this item is listed under in your business. e.g., \"travel\", \"man > bags\".

        :return: The category of this Item.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Item.
        The category this item is listed under in your business. e.g., \"travel\", \"man > bags\".

        :param category: The category of this Item.
        :type: str
        """

        self._category = category

    @property
    def tags(self):
        """
        Gets the tags of this Item.
        The tags used to describe this item in your business. e.g., \"man\", \"summer\".

        :return: The tags of this Item.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Item.
        The tags used to describe this item in your business. e.g., \"man\", \"summer\".

        :param tags: The tags of this Item.
        :type: str
        """

        self._tags = tags

    @property
    def color(self):
        """
        Gets the color of this Item.
        The color of the item.

        :return: The color of this Item.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this Item.
        The color of the item.

        :param color: The color of this Item.
        :type: str
        """

        self._color = color

    @property
    def quantity(self):
        """
        Gets the quantity of this Item.
        The quantity of the item.

        :return: The quantity of this Item.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this Item.
        The quantity of the item.

        :param quantity: The quantity of this Item.
        :type: int
        """

        self._quantity = quantity

    @property
    def is_on_sale(self):
        """
        Gets the is_on_sale of this Item.
        Is item on sale or running offers on this item .

        :return: The is_on_sale of this Item.
        :rtype: bool
        """
        return self._is_on_sale

    @is_on_sale.setter
    def is_on_sale(self, is_on_sale):
        """
        Sets the is_on_sale of this Item.
        Is item on sale or running offers on this item .

        :param is_on_sale: The is_on_sale of this Item.
        :type: bool
        """

        self._is_on_sale = is_on_sale

    @property
    def max_quantity(self):
        """
        Gets the max_quantity of this Item.
        The max quantity per user for this item.

        :return: The max_quantity of this Item.
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """
        Sets the max_quantity of this Item.
        The max quantity per user for this item.

        :param max_quantity: The max_quantity of this Item.
        :type: int
        """

        self._max_quantity = max_quantity

    @property
    def discount_price(self):
        """
        Gets the discount_price of this Item.
        Price of the product after discount.

        :return: The discount_price of this Item.
        :rtype: str
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """
        Sets the discount_price of this Item.
        Price of the product after discount.

        :param discount_price: The discount_price of this Item.
        :type: str
        """

        self._discount_price = discount_price

    @property
    def product_weight(self):
        """
        Gets the product_weight of this Item.
        Weight of the product in Kilo Gram, e.g. \"3\" , \"0.5\"

        :return: The product_weight of this Item.
        :rtype: str
        """
        return self._product_weight

    @product_weight.setter
    def product_weight(self, product_weight):
        """
        Sets the product_weight of this Item.
        Weight of the product in Kilo Gram, e.g. \"3\" , \"0.5\"

        :param product_weight: The product_weight of this Item.
        :type: str
        """

        self._product_weight = product_weight

    @property
    def country(self):
        """
        Gets the country of this Item.
        The [ISO-3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the item, e.g., \"IN\" in case of India.

        :return: The country of this Item.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Item.
        The [ISO-3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the item, e.g., \"IN\" in case of India.

        :param country: The country of this Item.
        :type: str
        """

        self._country = country

    @property
    def description_short(self):
        """
        Gets the description_short of this Item.
        Short description of the item.

        :return: The description_short of this Item.
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """
        Sets the description_short of this Item.
        Short description of the item.

        :param description_short: The description_short of this Item.
        :type: str
        """

        self._description_short = description_short

    @property
    def description(self):
        """
        Gets the description of this Item.
        Detail description of the item.

        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Item.
        Detail description of the item.

        :param description: The description of this Item.
        :type: str
        """

        self._description = description

    @property
    def seller(self):
        """
        Gets the seller of this Item.

        :return: The seller of this Item.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """
        Sets the seller of this Item.

        :param seller: The seller of this Item.
        :type: Seller
        """

        self._seller = seller

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
