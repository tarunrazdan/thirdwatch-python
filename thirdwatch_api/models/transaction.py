# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Transaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, session_id=None, order_id=None, transaction_id=None, device_ip=None, origin_timestamp=None, user_email=None, amount=None, currency_code=None, transaction_type=None, transaction_status=None, is_first_time_buyer=None, billing_address=None, shipping_address=None, payment_method=None, custom_info=None):
        """
        Transaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'session_id': 'str',
            'order_id': 'str',
            'transaction_id': 'str',
            'device_ip': 'str',
            'origin_timestamp': 'str',
            'user_email': 'str',
            'amount': 'str',
            'currency_code': 'str',
            'transaction_type': 'str',
            'transaction_status': 'str',
            'is_first_time_buyer': 'bool',
            'billing_address': 'BillingAddress',
            'shipping_address': 'ShippingAddress',
            'payment_method': 'PaymentMethod',
            'custom_info': 'CustomInfo'
        }

        self.attribute_map = {
            'user_id': '_userId',
            'session_id': '_sessionId',
            'order_id': '_orderId',
            'transaction_id': '_transactionId',
            'device_ip': '_deviceIp',
            'origin_timestamp': '_originTimestamp',
            'user_email': '_userEmail',
            'amount': '_amount',
            'currency_code': '_currencyCode',
            'transaction_type': '_transactionType',
            'transaction_status': '_transactionStatus',
            'is_first_time_buyer': '_isFirstTimeBuyer',
            'billing_address': '_billingAddress',
            'shipping_address': '_shippingAddress',
            'payment_method': '_paymentMethod',
            'custom_info': '_customInfo'
        }

        self._user_id = user_id
        self._session_id = session_id
        self._order_id = order_id
        self._transaction_id = transaction_id
        self._device_ip = device_ip
        self._origin_timestamp = origin_timestamp
        self._user_email = user_email
        self._amount = amount
        self._currency_code = currency_code
        self._transaction_type = transaction_type
        self._transaction_status = transaction_status
        self._is_first_time_buyer = is_first_time_buyer
        self._billing_address = billing_address
        self._shipping_address = shipping_address
        self._payment_method = payment_method
        self._custom_info = custom_info

    @property
    def user_id(self):
        """
        Gets the user_id of this Transaction.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :return: The user_id of this Transaction.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Transaction.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :param user_id: The user_id of this Transaction.
        :type: str
        """

        self._user_id = user_id

    @property
    def session_id(self):
        """
        Gets the session_id of this Transaction.
        The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.

        :return: The session_id of this Transaction.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """
        Sets the session_id of this Transaction.
        The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.

        :param session_id: The session_id of this Transaction.
        :type: str
        """

        self._session_id = session_id

    @property
    def order_id(self):
        """
        Gets the order_id of this Transaction.
        The ID for tracking this order in your system.

        :return: The order_id of this Transaction.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this Transaction.
        The ID for tracking this order in your system.

        :param order_id: The order_id of this Transaction.
        :type: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this Transaction.
        The ID for identifying this transaction. Important for tracking transactions, and linking different parts of the same transaction together, e.g., linking a refund to its original transaction.

        :return: The transaction_id of this Transaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this Transaction.
        The ID for identifying this transaction. Important for tracking transactions, and linking different parts of the same transaction together, e.g., linking a refund to its original transaction.

        :param transaction_id: The transaction_id of this Transaction.
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def device_ip(self):
        """
        Gets the device_ip of this Transaction.
        IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.

        :return: The device_ip of this Transaction.
        :rtype: str
        """
        return self._device_ip

    @device_ip.setter
    def device_ip(self, device_ip):
        """
        Sets the device_ip of this Transaction.
        IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.

        :param device_ip: The device_ip of this Transaction.
        :type: str
        """

        self._device_ip = device_ip

    @property
    def origin_timestamp(self):
        """
        Gets the origin_timestamp of this Transaction.
        Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.

        :return: The origin_timestamp of this Transaction.
        :rtype: str
        """
        return self._origin_timestamp

    @origin_timestamp.setter
    def origin_timestamp(self, origin_timestamp):
        """
        Sets the origin_timestamp of this Transaction.
        Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.

        :param origin_timestamp: The origin_timestamp of this Transaction.
        :type: str
        """

        self._origin_timestamp = origin_timestamp

    @property
    def user_email(self):
        """
        Gets the user_email of this Transaction.
        Email of the user creating this order. Note - If the user's email is also their account ID in your system, set both the userId and userEmail fields to their email address.

        :return: The user_email of this Transaction.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this Transaction.
        Email of the user creating this order. Note - If the user's email is also their account ID in your system, set both the userId and userEmail fields to their email address.

        :param user_email: The user_email of this Transaction.
        :type: str
        """

        self._user_email = user_email

    @property
    def amount(self):
        """
        Gets the amount of this Transaction.
        The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"

        :return: The amount of this Transaction.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Transaction.
        The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"

        :param amount: The amount of this Transaction.
        :type: str
        """

        self._amount = amount

    @property
    def currency_code(self):
        """
        Gets the currency_code of this Transaction.
        The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.

        :return: The currency_code of this Transaction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this Transaction.
        The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.

        :param currency_code: The currency_code of this Transaction.
        :type: str
        """

        self._currency_code = currency_code

    @property
    def transaction_type(self):
        """
        Gets the transaction_type of this Transaction.
        The type of transaction being recorded. e.g. _sale, _authorize, _capture, _void, _refund, _deposit, _withdrawal, _transfer

        :return: The transaction_type of this Transaction.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """
        Sets the transaction_type of this Transaction.
        The type of transaction being recorded. e.g. _sale, _authorize, _capture, _void, _refund, _deposit, _withdrawal, _transfer

        :param transaction_type: The transaction_type of this Transaction.
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def transaction_status(self):
        """
        Gets the transaction_status of this Transaction.
        Use _transactionStatus to indicate the status of the transaction. The value can be \"_success\" (default value), \"_failure\" or \"_pending\". For instance, If the transaction was rejected by the payment gateway, set the value to \"_failure\".

        :return: The transaction_status of this Transaction.
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """
        Sets the transaction_status of this Transaction.
        Use _transactionStatus to indicate the status of the transaction. The value can be \"_success\" (default value), \"_failure\" or \"_pending\". For instance, If the transaction was rejected by the payment gateway, set the value to \"_failure\".

        :param transaction_status: The transaction_status of this Transaction.
        :type: str
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")

        self._transaction_status = transaction_status

    @property
    def is_first_time_buyer(self):
        """
        Gets the is_first_time_buyer of this Transaction.
        Is user first time buyer.

        :return: The is_first_time_buyer of this Transaction.
        :rtype: bool
        """
        return self._is_first_time_buyer

    @is_first_time_buyer.setter
    def is_first_time_buyer(self, is_first_time_buyer):
        """
        Sets the is_first_time_buyer of this Transaction.
        Is user first time buyer.

        :param is_first_time_buyer: The is_first_time_buyer of this Transaction.
        :type: bool
        """

        self._is_first_time_buyer = is_first_time_buyer

    @property
    def billing_address(self):
        """
        Gets the billing_address of this Transaction.

        :return: The billing_address of this Transaction.
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this Transaction.

        :param billing_address: The billing_address of this Transaction.
        :type: BillingAddress
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this Transaction.

        :return: The shipping_address of this Transaction.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this Transaction.

        :param shipping_address: The shipping_address of this Transaction.
        :type: ShippingAddress
        """

        self._shipping_address = shipping_address

    @property
    def payment_method(self):
        """
        Gets the payment_method of this Transaction.

        :return: The payment_method of this Transaction.
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """
        Sets the payment_method of this Transaction.

        :param payment_method: The payment_method of this Transaction.
        :type: PaymentMethod
        """

        self._payment_method = payment_method

    @property
    def custom_info(self):
        """
        Gets the custom_info of this Transaction.

        :return: The custom_info of this Transaction.
        :rtype: CustomInfo
        """
        return self._custom_info

    @custom_info.setter
    def custom_info(self, custom_info):
        """
        Sets the custom_info of this Transaction.

        :param custom_info: The custom_info of this Transaction.
        :type: CustomInfo
        """

        self._custom_info = custom_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
