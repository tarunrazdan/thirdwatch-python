# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentMethod(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, payment_type=None, amount=None, currency_code=None, payment_gateway=None, account_name=None, card_bin=None, avs_response_code=None, cvv_response_code=None, card_last4=None, card_expiry_month=None, card_expiry_year=None):
        """
        PaymentMethod - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'payment_type': 'str',
            'amount': 'str',
            'currency_code': 'str',
            'payment_gateway': 'str',
            'account_name': 'str',
            'card_bin': 'str',
            'avs_response_code': 'str',
            'cvv_response_code': 'str',
            'card_last4': 'str',
            'card_expiry_month': 'str',
            'card_expiry_year': 'str'
        }

        self.attribute_map = {
            'payment_type': '_paymentType',
            'amount': '_amount',
            'currency_code': '_currencyCode',
            'payment_gateway': '_paymentGateway',
            'account_name': '_accountName',
            'card_bin': '_cardBin',
            'avs_response_code': '_avsResponseCode',
            'cvv_response_code': '_cvvResponseCode',
            'card_last4': '_cardLast4',
            'card_expiry_month': '_cardExpiryMonth',
            'card_expiry_year': '_cardExpiryYear'
        }

        self._payment_type = payment_type
        self._amount = amount
        self._currency_code = currency_code
        self._payment_gateway = payment_gateway
        self._account_name = account_name
        self._card_bin = card_bin
        self._avs_response_code = avs_response_code
        self._cvv_response_code = cvv_response_code
        self._card_last4 = card_last4
        self._card_expiry_month = card_expiry_month
        self._card_expiry_year = card_expiry_year

    @property
    def payment_type(self):
        """
        Gets the payment_type of this PaymentMethod.
        Values like - _cash, _check, _creditCard, _debitCard, _netBanking, _wallet, _cryptoCurrency, _electronicFundTransfer, _financing, _giftCard, _interac, _invoice, _moneyOrder, _masterPass, _points, _storeCredit, _thirdPartyProcessor, _voucher

        :return: The payment_type of this PaymentMethod.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """
        Sets the payment_type of this PaymentMethod.
        Values like - _cash, _check, _creditCard, _debitCard, _netBanking, _wallet, _cryptoCurrency, _electronicFundTransfer, _financing, _giftCard, _interac, _invoice, _moneyOrder, _masterPass, _points, _storeCredit, _thirdPartyProcessor, _voucher

        :param payment_type: The payment_type of this PaymentMethod.
        :type: str
        """

        self._payment_type = payment_type

    @property
    def amount(self):
        """
        Gets the amount of this PaymentMethod.
        The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\". In case of multiple payment methods in order it's useful.

        :return: The amount of this PaymentMethod.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this PaymentMethod.
        The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\". In case of multiple payment methods in order it's useful.

        :param amount: The amount of this PaymentMethod.
        :type: str
        """

        self._amount = amount

    @property
    def currency_code(self):
        """
        Gets the currency_code of this PaymentMethod.
        The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems. In case of multiple payment methods in order it's useful.

        :return: The currency_code of this PaymentMethod.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this PaymentMethod.
        The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems. In case of multiple payment methods in order it's useful.

        :param currency_code: The currency_code of this PaymentMethod.
        :type: str
        """

        self._currency_code = currency_code

    @property
    def payment_gateway(self):
        """
        Gets the payment_gateway of this PaymentMethod.
        fill value like bank name, gateway name, wallet name etc, e.g. payu, paypal, icici, paytm

        :return: The payment_gateway of this PaymentMethod.
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """
        Sets the payment_gateway of this PaymentMethod.
        fill value like bank name, gateway name, wallet name etc, e.g. payu, paypal, icici, paytm

        :param payment_gateway: The payment_gateway of this PaymentMethod.
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def account_name(self):
        """
        Gets the account_name of this PaymentMethod.
        Account name oif the user for that payment method

        :return: The account_name of this PaymentMethod.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """
        Sets the account_name of this PaymentMethod.
        Account name oif the user for that payment method

        :param account_name: The account_name of this PaymentMethod.
        :type: str
        """

        self._account_name = account_name

    @property
    def card_bin(self):
        """
        Gets the card_bin of this PaymentMethod.
        The first six digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details.

        :return: The card_bin of this PaymentMethod.
        :rtype: str
        """
        return self._card_bin

    @card_bin.setter
    def card_bin(self, card_bin):
        """
        Sets the card_bin of this PaymentMethod.
        The first six digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details.

        :param card_bin: The card_bin of this PaymentMethod.
        :type: str
        """

        self._card_bin = card_bin

    @property
    def avs_response_code(self):
        """
        Gets the avs_response_code of this PaymentMethod.
        Response code from the AVS address verification system. Used in payments involving credit cards.

        :return: The avs_response_code of this PaymentMethod.
        :rtype: str
        """
        return self._avs_response_code

    @avs_response_code.setter
    def avs_response_code(self, avs_response_code):
        """
        Sets the avs_response_code of this PaymentMethod.
        Response code from the AVS address verification system. Used in payments involving credit cards.

        :param avs_response_code: The avs_response_code of this PaymentMethod.
        :type: str
        """

        self._avs_response_code = avs_response_code

    @property
    def cvv_response_code(self):
        """
        Gets the cvv_response_code of this PaymentMethod.
        Response code from the credit card company indicating if the CVV number entered matches the number on record. Used in payments involving credit cards.

        :return: The cvv_response_code of this PaymentMethod.
        :rtype: str
        """
        return self._cvv_response_code

    @cvv_response_code.setter
    def cvv_response_code(self, cvv_response_code):
        """
        Sets the cvv_response_code of this PaymentMethod.
        Response code from the credit card company indicating if the CVV number entered matches the number on record. Used in payments involving credit cards.

        :param cvv_response_code: The cvv_response_code of this PaymentMethod.
        :type: str
        """

        self._cvv_response_code = cvv_response_code

    @property
    def card_last4(self):
        """
        Gets the card_last4 of this PaymentMethod.
        The last four digits of the credit card number.

        :return: The card_last4 of this PaymentMethod.
        :rtype: str
        """
        return self._card_last4

    @card_last4.setter
    def card_last4(self, card_last4):
        """
        Sets the card_last4 of this PaymentMethod.
        The last four digits of the credit card number.

        :param card_last4: The card_last4 of this PaymentMethod.
        :type: str
        """

        self._card_last4 = card_last4

    @property
    def card_expiry_month(self):
        """
        Gets the card_expiry_month of this PaymentMethod.
        Expiry month of the card.

        :return: The card_expiry_month of this PaymentMethod.
        :rtype: str
        """
        return self._card_expiry_month

    @card_expiry_month.setter
    def card_expiry_month(self, card_expiry_month):
        """
        Sets the card_expiry_month of this PaymentMethod.
        Expiry month of the card.

        :param card_expiry_month: The card_expiry_month of this PaymentMethod.
        :type: str
        """

        self._card_expiry_month = card_expiry_month

    @property
    def card_expiry_year(self):
        """
        Gets the card_expiry_year of this PaymentMethod.
        Expiry year of the card.

        :return: The card_expiry_year of this PaymentMethod.
        :rtype: str
        """
        return self._card_expiry_year

    @card_expiry_year.setter
    def card_expiry_year(self, card_expiry_year):
        """
        Sets the card_expiry_year of this PaymentMethod.
        Expiry year of the card.

        :param card_expiry_year: The card_expiry_year of this PaymentMethod.
        :type: str
        """

        self._card_expiry_year = card_expiry_year

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
