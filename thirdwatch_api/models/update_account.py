# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, session_id=None, device_ip=None, origin_timestamp=None, user_email=None, first_name=None, last_name=None, phone=None, age=None, gender=None, referral_code=None, referrer_user_id=None, billing_address=None, shipping_address=None, payment_methods=None, promotions=None, social_sign_on_type=None, email_confirmed_status=None, phone_confirmed_status=None, is_newsletter_subscribed=None, account_status=None, facebook_id=None, google_id=None, twitter_id=None, custom_info=None):
        """
        UpdateAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'session_id': 'str',
            'device_ip': 'str',
            'origin_timestamp': 'str',
            'user_email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'phone': 'str',
            'age': 'str',
            'gender': 'str',
            'referral_code': 'str',
            'referrer_user_id': 'str',
            'billing_address': 'BillingAddress',
            'shipping_address': 'ShippingAddress',
            'payment_methods': 'list[PaymentMethod]',
            'promotions': 'list[Promotion]',
            'social_sign_on_type': 'str',
            'email_confirmed_status': 'str',
            'phone_confirmed_status': 'str',
            'is_newsletter_subscribed': 'bool',
            'account_status': 'str',
            'facebook_id': 'str',
            'google_id': 'str',
            'twitter_id': 'str',
            'custom_info': 'CustomInfo'
        }

        self.attribute_map = {
            'user_id': '_userId',
            'session_id': '_sessionId',
            'device_ip': '_deviceIp',
            'origin_timestamp': '_originTimestamp',
            'user_email': '_userEmail',
            'first_name': '_firstName',
            'last_name': '_lastName',
            'phone': '_phone',
            'age': '_age',
            'gender': '_gender',
            'referral_code': '_referralCode',
            'referrer_user_id': '_referrerUserId',
            'billing_address': '_billingAddress',
            'shipping_address': '_shippingAddress',
            'payment_methods': '_paymentMethods',
            'promotions': '_promotions',
            'social_sign_on_type': '_socialSignOnType',
            'email_confirmed_status': '_emailConfirmedStatus',
            'phone_confirmed_status': '_phoneConfirmedStatus',
            'is_newsletter_subscribed': '_isNewsletterSubscribed',
            'account_status': '_accountStatus',
            'facebook_id': '_facebookId',
            'google_id': '_googleId',
            'twitter_id': '_twitterId',
            'custom_info': '_customInfo'
        }

        self._user_id = user_id
        self._session_id = session_id
        self._device_ip = device_ip
        self._origin_timestamp = origin_timestamp
        self._user_email = user_email
        self._first_name = first_name
        self._last_name = last_name
        self._phone = phone
        self._age = age
        self._gender = gender
        self._referral_code = referral_code
        self._referrer_user_id = referrer_user_id
        self._billing_address = billing_address
        self._shipping_address = shipping_address
        self._payment_methods = payment_methods
        self._promotions = promotions
        self._social_sign_on_type = social_sign_on_type
        self._email_confirmed_status = email_confirmed_status
        self._phone_confirmed_status = phone_confirmed_status
        self._is_newsletter_subscribed = is_newsletter_subscribed
        self._account_status = account_status
        self._facebook_id = facebook_id
        self._google_id = google_id
        self._twitter_id = twitter_id
        self._custom_info = custom_info

    @property
    def user_id(self):
        """
        Gets the user_id of this UpdateAccount.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :return: The user_id of this UpdateAccount.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this UpdateAccount.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :param user_id: The user_id of this UpdateAccount.
        :type: str
        """

        self._user_id = user_id

    @property
    def session_id(self):
        """
        Gets the session_id of this UpdateAccount.
        The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.

        :return: The session_id of this UpdateAccount.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """
        Sets the session_id of this UpdateAccount.
        The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.

        :param session_id: The session_id of this UpdateAccount.
        :type: str
        """

        self._session_id = session_id

    @property
    def device_ip(self):
        """
        Gets the device_ip of this UpdateAccount.
        IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.

        :return: The device_ip of this UpdateAccount.
        :rtype: str
        """
        return self._device_ip

    @device_ip.setter
    def device_ip(self, device_ip):
        """
        Sets the device_ip of this UpdateAccount.
        IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.

        :param device_ip: The device_ip of this UpdateAccount.
        :type: str
        """

        self._device_ip = device_ip

    @property
    def origin_timestamp(self):
        """
        Gets the origin_timestamp of this UpdateAccount.
        Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.

        :return: The origin_timestamp of this UpdateAccount.
        :rtype: str
        """
        return self._origin_timestamp

    @origin_timestamp.setter
    def origin_timestamp(self, origin_timestamp):
        """
        Sets the origin_timestamp of this UpdateAccount.
        Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.

        :param origin_timestamp: The origin_timestamp of this UpdateAccount.
        :type: str
        """

        self._origin_timestamp = origin_timestamp

    @property
    def user_email(self):
        """
        Gets the user_email of this UpdateAccount.
        Email of the user creating this order. Note - If the user's email is also their account ID in your system, set both the userId and userEmail fields to their email address.

        :return: The user_email of this UpdateAccount.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this UpdateAccount.
        Email of the user creating this order. Note - If the user's email is also their account ID in your system, set both the userId and userEmail fields to their email address.

        :param user_email: The user_email of this UpdateAccount.
        :type: str
        """

        self._user_email = user_email

    @property
    def first_name(self):
        """
        Gets the first_name of this UpdateAccount.
        Provide the first name associated with the user here.

        :return: The first_name of this UpdateAccount.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UpdateAccount.
        Provide the first name associated with the user here.

        :param first_name: The first_name of this UpdateAccount.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UpdateAccount.
        Provide the last name associated with the user here.

        :return: The last_name of this UpdateAccount.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UpdateAccount.
        Provide the last name associated with the user here.

        :param last_name: The last_name of this UpdateAccount.
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """
        Gets the phone of this UpdateAccount.
        The primary phone number of the user associated with this account. Provide the phone number as a string.

        :return: The phone of this UpdateAccount.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this UpdateAccount.
        The primary phone number of the user associated with this account. Provide the phone number as a string.

        :param phone: The phone of this UpdateAccount.
        :type: str
        """

        self._phone = phone

    @property
    def age(self):
        """
        Gets the age of this UpdateAccount.
        Age of the user e.g. \"25\"

        :return: The age of this UpdateAccount.
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """
        Sets the age of this UpdateAccount.
        Age of the user e.g. \"25\"

        :param age: The age of this UpdateAccount.
        :type: str
        """

        self._age = age

    @property
    def gender(self):
        """
        Gets the gender of this UpdateAccount.
        Gender of the user e.g. \"_male\", \"_female\" or \"_trans\"

        :return: The gender of this UpdateAccount.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this UpdateAccount.
        Gender of the user e.g. \"_male\", \"_female\" or \"_trans\"

        :param gender: The gender of this UpdateAccount.
        :type: str
        """

        self._gender = gender

    @property
    def referral_code(self):
        """
        Gets the referral_code of this UpdateAccount.
        Code or promotion used by the user while creating account.

        :return: The referral_code of this UpdateAccount.
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """
        Sets the referral_code of this UpdateAccount.
        Code or promotion used by the user while creating account.

        :param referral_code: The referral_code of this UpdateAccount.
        :type: str
        """

        self._referral_code = referral_code

    @property
    def referrer_user_id(self):
        """
        Gets the referrer_user_id of this UpdateAccount.
        The ID of the user that referred the current user to your business. This field is required for detecting referral fraud.

        :return: The referrer_user_id of this UpdateAccount.
        :rtype: str
        """
        return self._referrer_user_id

    @referrer_user_id.setter
    def referrer_user_id(self, referrer_user_id):
        """
        Sets the referrer_user_id of this UpdateAccount.
        The ID of the user that referred the current user to your business. This field is required for detecting referral fraud.

        :param referrer_user_id: The referrer_user_id of this UpdateAccount.
        :type: str
        """

        self._referrer_user_id = referrer_user_id

    @property
    def billing_address(self):
        """
        Gets the billing_address of this UpdateAccount.

        :return: The billing_address of this UpdateAccount.
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this UpdateAccount.

        :param billing_address: The billing_address of this UpdateAccount.
        :type: BillingAddress
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """
        Gets the shipping_address of this UpdateAccount.

        :return: The shipping_address of this UpdateAccount.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """
        Sets the shipping_address of this UpdateAccount.

        :param shipping_address: The shipping_address of this UpdateAccount.
        :type: ShippingAddress
        """

        self._shipping_address = shipping_address

    @property
    def payment_methods(self):
        """
        Gets the payment_methods of this UpdateAccount.
        The payment information associated with this account. Represented as an array of nested payment_method objects containing payment type, payment gateway, credit card bin, etc.

        :return: The payment_methods of this UpdateAccount.
        :rtype: list[PaymentMethod]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """
        Sets the payment_methods of this UpdateAccount.
        The payment information associated with this account. Represented as an array of nested payment_method objects containing payment type, payment gateway, credit card bin, etc.

        :param payment_methods: The payment_methods of this UpdateAccount.
        :type: list[PaymentMethod]
        """

        self._payment_methods = payment_methods

    @property
    def promotions(self):
        """
        Gets the promotions of this UpdateAccount.
        The list of promotions that apply to this account. You can add one or more promotions when creating or updating an order. Represented as a JSON array of promotion objects. You can also separately add promotions to the account via the addPromotion event.

        :return: The promotions of this UpdateAccount.
        :rtype: list[Promotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """
        Sets the promotions of this UpdateAccount.
        The list of promotions that apply to this account. You can add one or more promotions when creating or updating an order. Represented as a JSON array of promotion objects. You can also separately add promotions to the account via the addPromotion event.

        :param promotions: The promotions of this UpdateAccount.
        :type: list[Promotion]
        """

        self._promotions = promotions

    @property
    def social_sign_on_type(self):
        """
        Gets the social_sign_on_type of this UpdateAccount.
        If the user logged in with a social identify provider, give the name here. e.g. _google, _facebook, _twitter, _linkedin, _other

        :return: The social_sign_on_type of this UpdateAccount.
        :rtype: str
        """
        return self._social_sign_on_type

    @social_sign_on_type.setter
    def social_sign_on_type(self, social_sign_on_type):
        """
        Sets the social_sign_on_type of this UpdateAccount.
        If the user logged in with a social identify provider, give the name here. e.g. _google, _facebook, _twitter, _linkedin, _other

        :param social_sign_on_type: The social_sign_on_type of this UpdateAccount.
        :type: str
        """

        self._social_sign_on_type = social_sign_on_type

    @property
    def email_confirmed_status(self):
        """
        Gets the email_confirmed_status of this UpdateAccount.
        Status of email verification. e.g. _success, _failure, _pending

        :return: The email_confirmed_status of this UpdateAccount.
        :rtype: str
        """
        return self._email_confirmed_status

    @email_confirmed_status.setter
    def email_confirmed_status(self, email_confirmed_status):
        """
        Sets the email_confirmed_status of this UpdateAccount.
        Status of email verification. e.g. _success, _failure, _pending

        :param email_confirmed_status: The email_confirmed_status of this UpdateAccount.
        :type: str
        """

        self._email_confirmed_status = email_confirmed_status

    @property
    def phone_confirmed_status(self):
        """
        Gets the phone_confirmed_status of this UpdateAccount.
        Status of phone verification. e.g. _success, _failure, _pending

        :return: The phone_confirmed_status of this UpdateAccount.
        :rtype: str
        """
        return self._phone_confirmed_status

    @phone_confirmed_status.setter
    def phone_confirmed_status(self, phone_confirmed_status):
        """
        Sets the phone_confirmed_status of this UpdateAccount.
        Status of phone verification. e.g. _success, _failure, _pending

        :param phone_confirmed_status: The phone_confirmed_status of this UpdateAccount.
        :type: str
        """

        self._phone_confirmed_status = phone_confirmed_status

    @property
    def is_newsletter_subscribed(self):
        """
        Gets the is_newsletter_subscribed of this UpdateAccount.
        Is user subscribed for newsletter. e.g. true, false

        :return: The is_newsletter_subscribed of this UpdateAccount.
        :rtype: bool
        """
        return self._is_newsletter_subscribed

    @is_newsletter_subscribed.setter
    def is_newsletter_subscribed(self, is_newsletter_subscribed):
        """
        Sets the is_newsletter_subscribed of this UpdateAccount.
        Is user subscribed for newsletter. e.g. true, false

        :param is_newsletter_subscribed: The is_newsletter_subscribed of this UpdateAccount.
        :type: bool
        """

        self._is_newsletter_subscribed = is_newsletter_subscribed

    @property
    def account_status(self):
        """
        Gets the account_status of this UpdateAccount.
        Current status of account, e.g. _active, _inactive

        :return: The account_status of this UpdateAccount.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """
        Sets the account_status of this UpdateAccount.
        Current status of account, e.g. _active, _inactive

        :param account_status: The account_status of this UpdateAccount.
        :type: str
        """

        self._account_status = account_status

    @property
    def facebook_id(self):
        """
        Gets the facebook_id of this UpdateAccount.
        Facebook user id or token of the user. This can help to varify his social identity.

        :return: The facebook_id of this UpdateAccount.
        :rtype: str
        """
        return self._facebook_id

    @facebook_id.setter
    def facebook_id(self, facebook_id):
        """
        Sets the facebook_id of this UpdateAccount.
        Facebook user id or token of the user. This can help to varify his social identity.

        :param facebook_id: The facebook_id of this UpdateAccount.
        :type: str
        """

        self._facebook_id = facebook_id

    @property
    def google_id(self):
        """
        Gets the google_id of this UpdateAccount.
        Google user id or token of the user. This can help to varify his social identity.

        :return: The google_id of this UpdateAccount.
        :rtype: str
        """
        return self._google_id

    @google_id.setter
    def google_id(self, google_id):
        """
        Sets the google_id of this UpdateAccount.
        Google user id or token of the user. This can help to varify his social identity.

        :param google_id: The google_id of this UpdateAccount.
        :type: str
        """

        self._google_id = google_id

    @property
    def twitter_id(self):
        """
        Gets the twitter_id of this UpdateAccount.
        Twitter handle or token of the user. This can help to varify his social identity.

        :return: The twitter_id of this UpdateAccount.
        :rtype: str
        """
        return self._twitter_id

    @twitter_id.setter
    def twitter_id(self, twitter_id):
        """
        Sets the twitter_id of this UpdateAccount.
        Twitter handle or token of the user. This can help to varify his social identity.

        :param twitter_id: The twitter_id of this UpdateAccount.
        :type: str
        """

        self._twitter_id = twitter_id

    @property
    def custom_info(self):
        """
        Gets the custom_info of this UpdateAccount.

        :return: The custom_info of this UpdateAccount.
        :rtype: CustomInfo
        """
        return self._custom_info

    @custom_info.setter
    def custom_info(self, custom_info):
        """
        Sets the custom_info of this UpdateAccount.

        :param custom_info: The custom_info of this UpdateAccount.
        :type: CustomInfo
        """

        self._custom_info = custom_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdateAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
