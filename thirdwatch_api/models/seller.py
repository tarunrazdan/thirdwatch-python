# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Seller(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, seller_id=None, name=None, email=None, phone=None, created_date=None, last_updated_date=None, onboarding_ip_address=None):
        """
        Seller - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'seller_id': 'str',
            'name': 'str',
            'email': 'str',
            'phone': 'str',
            'created_date': 'str',
            'last_updated_date': 'str',
            'onboarding_ip_address': 'str'
        }

        self.attribute_map = {
            'seller_id': '_sellerId',
            'name': '_name',
            'email': '_email',
            'phone': '_phone',
            'created_date': '_createdDate',
            'last_updated_date': '_lastUpdatedDate',
            'onboarding_ip_address': '_onboardingIpAddress'
        }

        self._seller_id = seller_id
        self._name = name
        self._email = email
        self._phone = phone
        self._created_date = created_date
        self._last_updated_date = last_updated_date
        self._onboarding_ip_address = onboarding_ip_address

    @property
    def seller_id(self):
        """
        Gets the seller_id of this Seller.
        The seller’s internal account ID. This field is required on all events required seller info.

        :return: The seller_id of this Seller.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """
        Sets the seller_id of this Seller.
        The seller’s internal account ID. This field is required on all events required seller info.

        :param seller_id: The seller_id of this Seller.
        :type: str
        """

        self._seller_id = seller_id

    @property
    def name(self):
        """
        Gets the name of this Seller.
        Provide the full name associated with the seller here. Concatenate first name and last name together if you collect them separately in your system.

        :return: The name of this Seller.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Seller.
        Provide the full name associated with the seller here. Concatenate first name and last name together if you collect them separately in your system.

        :param name: The name of this Seller.
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """
        Gets the email of this Seller.
        Email of the seller. Note - If the seller's email is also their account ID in your system, set both the _sellerId and _email fields to their email address.

        :return: The email of this Seller.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Seller.
        Email of the seller. Note - If the seller's email is also their account ID in your system, set both the _sellerId and _email fields to their email address.

        :param email: The email of this Seller.
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """
        Gets the phone of this Seller.
        The primary phone number of the seller associated with this account. Provide the phone number as a string.

        :return: The phone of this Seller.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Seller.
        The primary phone number of the seller associated with this account. Provide the phone number as a string.

        :param phone: The phone of this Seller.
        :type: str
        """

        self._phone = phone

    @property
    def created_date(self):
        """
        Gets the created_date of this Seller.
        Date when seller registered in system.

        :return: The created_date of this Seller.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this Seller.
        Date when seller registered in system.

        :param created_date: The created_date of this Seller.
        :type: str
        """

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """
        Gets the last_updated_date of this Seller.
        Date when seller profile uopdated last time.

        :return: The last_updated_date of this Seller.
        :rtype: str
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """
        Sets the last_updated_date of this Seller.
        Date when seller profile uopdated last time.

        :param last_updated_date: The last_updated_date of this Seller.
        :type: str
        """

        self._last_updated_date = last_updated_date

    @property
    def onboarding_ip_address(self):
        """
        Gets the onboarding_ip_address of this Seller.
        Ip address used by seller while registration.

        :return: The onboarding_ip_address of this Seller.
        :rtype: str
        """
        return self._onboarding_ip_address

    @onboarding_ip_address.setter
    def onboarding_ip_address(self, onboarding_ip_address):
        """
        Sets the onboarding_ip_address of this Seller.
        Ip address used by seller while registration.

        :param onboarding_ip_address: The onboarding_ip_address of this Seller.
        :type: str
        """

        self._onboarding_ip_address = onboarding_ip_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Seller):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
