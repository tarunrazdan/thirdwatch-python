# coding: utf-8

"""
    Thirdwatch API

    The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Tag(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, is_bad=None, abuse_type=None, description=None, source=None, analyst=None, custom_info=None):
        """
        Tag - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'is_bad': 'bool',
            'abuse_type': 'str',
            'description': 'str',
            'source': 'str',
            'analyst': 'str',
            'custom_info': 'CustomInfo'
        }

        self.attribute_map = {
            'user_id': '_userId',
            'is_bad': '_isBad',
            'abuse_type': '_abuseType',
            'description': '_description',
            'source': '_source',
            'analyst': '_analyst',
            'custom_info': '_customInfo'
        }

        self._user_id = user_id
        self._is_bad = is_bad
        self._abuse_type = abuse_type
        self._description = description
        self._source = source
        self._analyst = analyst
        self._custom_info = custom_info

    @property
    def user_id(self):
        """
        Gets the user_id of this Tag.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :return: The user_id of this Tag.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Tag.
        The user's account ID according to your systems. Note that user IDs are case sensitive.

        :param user_id: The user_id of this Tag.
        :type: str
        """

        self._user_id = user_id

    @property
    def is_bad(self):
        """
        Gets the is_bad of this Tag.
        Indicates whether a user is engaging in behavior deemed harmful to your business. Set to true if the user is engaging in abusive activity. Set to false if the user is engaging in valid activity.

        :return: The is_bad of this Tag.
        :rtype: bool
        """
        return self._is_bad

    @is_bad.setter
    def is_bad(self, is_bad):
        """
        Sets the is_bad of this Tag.
        Indicates whether a user is engaging in behavior deemed harmful to your business. Set to true if the user is engaging in abusive activity. Set to false if the user is engaging in valid activity.

        :param is_bad: The is_bad of this Tag.
        :type: bool
        """

        self._is_bad = is_bad

    @property
    def abuse_type(self):
        """
        Gets the abuse_type of this Tag.
        The type of abuse for which you want to send a tag. It's important to send a tag specific to the type of abuse the user is committing so that thirdwatch can learn about specific patterns of behavior. You'll end up with more accurate results this way. e.g. _paymentAbuse, _contentAbuse, _promotionAbuse, _accountAbuse

        :return: The abuse_type of this Tag.
        :rtype: str
        """
        return self._abuse_type

    @abuse_type.setter
    def abuse_type(self, abuse_type):
        """
        Sets the abuse_type of this Tag.
        The type of abuse for which you want to send a tag. It's important to send a tag specific to the type of abuse the user is committing so that thirdwatch can learn about specific patterns of behavior. You'll end up with more accurate results this way. e.g. _paymentAbuse, _contentAbuse, _promotionAbuse, _accountAbuse

        :param abuse_type: The abuse_type of this Tag.
        :type: str
        """

        self._abuse_type = abuse_type

    @property
    def description(self):
        """
        Gets the description of this Tag.
        The text content of the tag.Useful as annotation on why the label was added.

        :return: The description of this Tag.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Tag.
        The text content of the tag.Useful as annotation on why the label was added.

        :param description: The description of this Tag.
        :type: str
        """

        self._description = description

    @property
    def source(self):
        """
        Gets the source of this Tag.
        String describing the original source of the tag information (e.g. payment gateway, manual review, etc.).

        :return: The source of this Tag.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Tag.
        String describing the original source of the tag information (e.g. payment gateway, manual review, etc.).

        :param source: The source of this Tag.
        :type: str
        """

        self._source = source

    @property
    def analyst(self):
        """
        Gets the analyst of this Tag.
        Unique identifier (e.g. email address) of the analyst who applied the label. Useful for tracking purposes after the fact.

        :return: The analyst of this Tag.
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """
        Sets the analyst of this Tag.
        Unique identifier (e.g. email address) of the analyst who applied the label. Useful for tracking purposes after the fact.

        :param analyst: The analyst of this Tag.
        :type: str
        """

        self._analyst = analyst

    @property
    def custom_info(self):
        """
        Gets the custom_info of this Tag.

        :return: The custom_info of this Tag.
        :rtype: CustomInfo
        """
        return self._custom_info

    @custom_info.setter
    def custom_info(self, custom_info):
        """
        Sets the custom_info of this Tag.

        :param custom_info: The custom_info of this Tag.
        :type: CustomInfo
        """

        self._custom_info = custom_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
